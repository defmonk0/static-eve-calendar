/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.6.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { DeleteFleetsFleetIdMembersMemberIdNotFound } from '../model/deleteFleetsFleetIdMembersMemberIdNotFound';
import { DeleteFleetsFleetIdSquadsSquadIdNotFound } from '../model/deleteFleetsFleetIdSquadsSquadIdNotFound';
import { DeleteFleetsFleetIdWingsWingIdNotFound } from '../model/deleteFleetsFleetIdWingsWingIdNotFound';
import { Forbidden } from '../model/forbidden';
import { GetCharactersCharacterIdFleetNotFound } from '../model/getCharactersCharacterIdFleetNotFound';
import { GetCharactersCharacterIdFleetOk } from '../model/getCharactersCharacterIdFleetOk';
import { GetFleetsFleetIdMembers200Ok } from '../model/getFleetsFleetIdMembers200Ok';
import { GetFleetsFleetIdMembersNotFound } from '../model/getFleetsFleetIdMembersNotFound';
import { GetFleetsFleetIdNotFound } from '../model/getFleetsFleetIdNotFound';
import { GetFleetsFleetIdOk } from '../model/getFleetsFleetIdOk';
import { GetFleetsFleetIdWings200Ok } from '../model/getFleetsFleetIdWings200Ok';
import { GetFleetsFleetIdWingsNotFound } from '../model/getFleetsFleetIdWingsNotFound';
import { InternalServerError } from '../model/internalServerError';
import { PostFleetsFleetIdMembersInvitation } from '../model/postFleetsFleetIdMembersInvitation';
import { PostFleetsFleetIdMembersNotFound } from '../model/postFleetsFleetIdMembersNotFound';
import { PostFleetsFleetIdMembersUnprocessableEntity } from '../model/postFleetsFleetIdMembersUnprocessableEntity';
import { PostFleetsFleetIdWingsCreated } from '../model/postFleetsFleetIdWingsCreated';
import { PostFleetsFleetIdWingsNotFound } from '../model/postFleetsFleetIdWingsNotFound';
import { PostFleetsFleetIdWingsWingIdSquadsCreated } from '../model/postFleetsFleetIdWingsWingIdSquadsCreated';
import { PostFleetsFleetIdWingsWingIdSquadsNotFound } from '../model/postFleetsFleetIdWingsWingIdSquadsNotFound';
import { PutFleetsFleetIdBadRequest } from '../model/putFleetsFleetIdBadRequest';
import { PutFleetsFleetIdMembersMemberIdMovement } from '../model/putFleetsFleetIdMembersMemberIdMovement';
import { PutFleetsFleetIdMembersMemberIdNotFound } from '../model/putFleetsFleetIdMembersMemberIdNotFound';
import { PutFleetsFleetIdMembersMemberIdUnprocessableEntity } from '../model/putFleetsFleetIdMembersMemberIdUnprocessableEntity';
import { PutFleetsFleetIdNewSettings } from '../model/putFleetsFleetIdNewSettings';
import { PutFleetsFleetIdNotFound } from '../model/putFleetsFleetIdNotFound';
import { PutFleetsFleetIdSquadsSquadIdNaming } from '../model/putFleetsFleetIdSquadsSquadIdNaming';
import { PutFleetsFleetIdSquadsSquadIdNotFound } from '../model/putFleetsFleetIdSquadsSquadIdNotFound';
import { PutFleetsFleetIdWingsWingIdNaming } from '../model/putFleetsFleetIdWingsWingIdNaming';
import { PutFleetsFleetIdWingsWingIdNotFound } from '../model/putFleetsFleetIdWingsWingIdNotFound';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';


@Injectable()
export class FleetsService {

    protected basePath = 'https://esi.tech.ccp.is/dev';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



    /**
     * Kick fleet member
     * Kick a fleet member  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public deleteFleetsFleetIdMembersMemberId(fleetId: number, memberId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<{}> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling deleteFleetsFleetIdMembersMemberId.');
        }
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling deleteFleetsFleetIdMembersMemberId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.delete<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/members/${encodeURIComponent(String(memberId))}/`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Delete fleet squad
     * Delete a fleet squad, only empty squads can be deleted  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
     * @param fleetId ID for a fleet
     * @param squadId The squad to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public deleteFleetsFleetIdSquadsSquadId(fleetId: number, squadId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<{}> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling deleteFleetsFleetIdSquadsSquadId.');
        }
        if (squadId === null || squadId === undefined) {
            throw new Error('Required parameter squadId was null or undefined when calling deleteFleetsFleetIdSquadsSquadId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.delete<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/squads/${encodeURIComponent(String(squadId))}/`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Delete fleet wing
     * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
     * @param fleetId ID for a fleet
     * @param wingId The wing to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public deleteFleetsFleetIdWingsWingId(fleetId: number, wingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<{}> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling deleteFleetsFleetIdWingsWingId.');
        }
        if (wingId === null || wingId === undefined) {
            throw new Error('Required parameter wingId was null or undefined when calling deleteFleetsFleetIdWingsWingId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.delete<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/wings/${encodeURIComponent(String(wingId))}/`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Get character fleet info
     * Return the fleet ID the character is in, if any.  --- Alternate route: &#x60;/v1/characters/{character_id}/fleet/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fleet/&#x60;  Alternate route: &#x60;/latest/characters/{character_id}/fleet/&#x60;  --- This route is cached for up to 60 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public getCharactersCharacterIdFleet(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<GetCharactersCharacterIdFleetOk> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdFleet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.get<any>(`${this.basePath}/characters/${encodeURIComponent(String(characterId))}/fleet/`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Get fleet information
     * Return details about a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60;  --- This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public getFleetsFleetId(fleetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<GetFleetsFleetIdOk> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling getFleetsFleetId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.get<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Get fleet members
     * Return information about fleet members  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60;  --- This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public getFleetsFleetIdMembers(fleetId: number, datasource?: string, language?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<Array<GetFleetsFleetIdMembers200Ok>> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling getFleetsFleetIdMembers.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (language !== undefined) {
            queryParameters = queryParameters.set('language', <any>language);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.get<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/members/`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Get fleet wings
     * Return information about wings in a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60;  --- This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public getFleetsFleetIdWings(fleetId: number, datasource?: string, language?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<Array<GetFleetsFleetIdWings200Ok>> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling getFleetsFleetIdWings.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (language !== undefined) {
            queryParameters = queryParameters.set('language', <any>language);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.get<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/wings/`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Create fleet invitation
     * Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/&#x60; 
     * @param fleetId ID for a fleet
     * @param invitation Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public postFleetsFleetIdMembers(fleetId: number, invitation: PostFleetsFleetIdMembersInvitation, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<{}> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling postFleetsFleetIdMembers.');
        }
        if (invitation === null || invitation === undefined) {
            throw new Error('Required parameter invitation was null or undefined when calling postFleetsFleetIdMembers.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.post<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/members/`, invitation, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Create fleet wing
     * Create a new wing in a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/&#x60; 
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public postFleetsFleetIdWings(fleetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<PostFleetsFleetIdWingsCreated> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling postFleetsFleetIdWings.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.post<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/wings/`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Create fleet squad
     * Create a new squad in a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
     * @param fleetId ID for a fleet
     * @param wingId The wing_id to create squad in
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public postFleetsFleetIdWingsWingIdSquads(fleetId: number, wingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<PostFleetsFleetIdWingsWingIdSquadsCreated> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling postFleetsFleetIdWingsWingIdSquads.');
        }
        if (wingId === null || wingId === undefined) {
            throw new Error('Required parameter wingId was null or undefined when calling postFleetsFleetIdWingsWingIdSquads.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.post<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/wings/${encodeURIComponent(String(wingId))}/squads/`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Update fleet
     * Update settings about a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/&#x60; 
     * @param fleetId ID for a fleet
     * @param newSettings What to update for this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public putFleetsFleetId(fleetId: number, newSettings: PutFleetsFleetIdNewSettings, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<{}> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetId.');
        }
        if (newSettings === null || newSettings === undefined) {
            throw new Error('Required parameter newSettings was null or undefined when calling putFleetsFleetId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.put<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/`, newSettings, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Move fleet member
     * Move a fleet member around  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/members/{member_id}/&#x60; 
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param movement Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public putFleetsFleetIdMembersMemberId(fleetId: number, memberId: number, movement: PutFleetsFleetIdMembersMemberIdMovement, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<{}> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }
        if (movement === null || movement === undefined) {
            throw new Error('Required parameter movement was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.put<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/members/${encodeURIComponent(String(memberId))}/`, movement, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Rename fleet squad
     * Rename a fleet squad  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
     * @param fleetId ID for a fleet
     * @param naming New name of the squad
     * @param squadId The squad to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public putFleetsFleetIdSquadsSquadId(fleetId: number, naming: PutFleetsFleetIdSquadsSquadIdNaming, squadId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<{}> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }
        if (naming === null || naming === undefined) {
            throw new Error('Required parameter naming was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }
        if (squadId === null || squadId === undefined) {
            throw new Error('Required parameter squadId was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.put<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/squads/${encodeURIComponent(String(squadId))}/`, naming, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * Rename fleet wing
     * Rename a fleet wing  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/latest/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
     * @param fleetId ID for a fleet
     * @param naming New name of the wing
     * @param wingId The wing to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    public putFleetsFleetIdWingsWingId(fleetId: number, naming: PutFleetsFleetIdWingsWingIdNaming, wingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Observable<{}> {
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }
        if (naming === null || naming === undefined) {
            throw new Error('Required parameter naming was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }
        if (wingId === null || wingId === undefined) {
            throw new Error('Required parameter wingId was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (userAgent !== undefined) {
            queryParameters = queryParameters.set('user_agent', <any>userAgent);
        }

        let headers = this.defaultHeaders;
        if (xUserAgent !== undefined && xUserAgent !== null) {
            headers = headers.set('X-User-Agent', String(xUserAgent));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return this.httpClient.put<any>(`${this.basePath}/fleets/${encodeURIComponent(String(fleetId))}/wings/${encodeURIComponent(String(wingId))}/`, naming, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

}
